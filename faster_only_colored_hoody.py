# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import Bot, Dispatcher, executor, types

import logging

from sql_conn_only_colored_hoody import *

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
bot = Bot(token="5152631822:AAGwokzR3fyyPd0hhCUQ3gXALp7llemdK8I")
db = Dispatcher(bot)

# –†–∞–∑–Ω—ã–µ —à—Ç—É—á–∫–∏
order = ''
user_name = False
order_knowledge = False
order_states = {-1: '–û—Ç–∫–ª–æ–Ω–µ–Ω',
                0: '–û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è',
                1: '–°–æ–±–∏—Ä–∞–µ—Ç—Å—è',
                2: '–°–æ–±—Ä–∞–Ω',
                3: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                4: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω –∏ –ø–æ–ª—É—á–µ–Ω'}

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ä–∞–±–æ—Ç–∞ —Å –Ω–∏–º–∏
back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="Return")
reset_btn = types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="Reset")
home_btn = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞
action_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
assort_btn = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç üõí")
stat_btn = types.KeyboardButton("–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ üìÑ")
action_markup.add(assort_btn, stat_btn)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
colors_markup = types.InlineKeyboardMarkup(row_width=1)
for color in give_colors():
    colors_markup.add(types.InlineKeyboardButton(color[0], callback_data="Chosen_color" + color[0]))
colors_markup.add(back_btn)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
sex_markup = types.InlineKeyboardMarkup(row_width=2)
male_btn = types.InlineKeyboardButton("–ú—É–∂", callback_data="Choice_sex_male")
female_btn = types.InlineKeyboardButton("–ñ–µ–Ω", callback_data="Choice_sex_female")
sex_markup.row(male_btn, female_btn)
sex_markup.add(reset_btn)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
size_markup = types.InlineKeyboardMarkup(row_width=1)
for size in ['XS', 'S', 'M', 'L', 'XL', 'XXL']:
    size_markup.add(types.InlineKeyboardButton(size, callback_data=f"Choice_size_{size}"))
size_markup.add(reset_btn)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑
accept_reject_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
yes_btn = types.KeyboardButton("–î–∞ üëç")
no_btn = types.KeyboardButton("–ù–µ—Ç üëé")
accept_reject_markup.add(yes_btn, no_btn)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–∞
add_or_no_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
add_btn = types.KeyboardButton("–î–∞ ‚ûï")
no_add_btn = types.KeyboardButton("–ù–µ—Ç ‚ûñ")
del_goods = types.KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É üóë")
add_or_no_markup.add(add_btn, no_add_btn, del_goods)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
arrange_or_no_markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
arrange_btn = types.KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å ‚òëÔ∏è")
drop_btn = types.KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å ‚ùå")
arrange_or_no_markup.add(arrange_btn, drop_btn)

inline_markups = (action_markup, colors_markup)

MODER_main_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
orders_check = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ üìÉ')
users_check = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë•')
MODER_main_markup.add(orders_check, users_check)

order_states_markup = types.InlineKeyboardMarkup(row_width=1)
for key, value in order_states.items():
    order_states_markup.add(types.InlineKeyboardButton(text=value, callback_data=f'restate_{key}'))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
def IS_MODER(message):
    if message.chat.id == 763283309:
        return True
    else:
        return False


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@db.message_handler(commands=["start"])
async def start(message):
    global user_name, order_knowledge
    order_knowledge = False

    if IS_MODER(message):
        await bot.send_message(message.chat.id, text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä! \n–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?',
                               parse_mode="html", reply_markup=MODER_main_markup)
    else:
        await bot.send_message(message.chat.id, text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ë–æ–¥—è–≥–∏–Ω</b>, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç '
                                                     '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.', parse_mode="html")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_regs(message.chat.id):
            await bot.send_message(message.chat.id,
                                   text='–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –í–∞—à–µ –∏–º—è —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ '
                                        '–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–≤—è–∑–∏ —Å –í–∞–º–∏. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å '
                                        '—Ñ–æ—Ä–º–∞—Ç—É, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏.'
                                        '\n–ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/–ò–í–ê–ù_1999 - –ò–≤–∞–Ω')
            user_name = True
        else:
            await bot.send_message(message.chat.id, text='\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å: ',
                                   reply_markup=inline_markups[0], parse_mode="html")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@db.message_handler(content_types=types.ContentTypes.TEXT)
async def messages(message: types.Message):
    global order, user_name, order_knowledge
    if not IS_MODER(message):
        if user_regs(message.chat.id):
            if user_name:  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    link = message.text.strip().split("-")[0]
                    name = message.text.strip().split("-")[1]
                    add_user(message.chat.id, name, link)
                    user_name = False
                    await bot.send_message(message.chat.id, text='\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å: ',
                                           reply_markup=inline_markups[0], parse_mode="html")
                except:
                    await bot.send_message(message.chat.id, text='–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ '
                                                                 '—Å –ø—Ä–∏–º–µ—Ä–æ–º: https://t.me/–ò–í–ê–ù_1999 - –ò–≤–∞–Ω')
            else:
                await bot.send_message(message.chat.id,
                                       text='–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –í–∞—à–µ –∏–º—è —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ '
                                            '–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–≤—è–∑–∏ —Å –í–∞–º–∏. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å '
                                            '—Ñ–æ—Ä–º–∞—Ç—É, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏.'
                                            '\n–ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/–ò–í–ê–ù_1999 - –ò–≤–∞–Ω')
                user_name = True

        elif order_knowledge:
            res = give_order(message.chat.id, message.text)
            if len(res) == 2:
                txt = f'–ó–ê–ö–ê–ó:\n' \
                      f'{res[0]}' \
                      f'\n\n–°—Ç–∞—Ç—É—Å: {order_states[res[1]]}'
            else:
                txt = res
            await bot.send_message(message.chat.id, txt, parse_mode='html')
            order_knowledge = False

        else:
            if message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç üõí":  # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"
                await bot.send_message(chat_id=message.chat.id,
                                            text="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤:"
                                                 "\n(–õ—é–±–æ–µ —Ö—É–¥–∏ - 1600 —Ä—É–±–ª–µ–π)", reply_markup=inline_markups[1])
                order = f'<u>–ó–ê–ö–ê–ó</u>:\n\n –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{give_user(message.chat.id)[0]} - ' \
                        f'{give_user(message.chat.id)[1]}</b>'

            elif message.text == '–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ üìÑ':
                await bot.send_message(message.chat.id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞", parse_mode="html")
                order_knowledge = True

            elif message.text == "–î–∞ üëç" and order != "":
                await bot.send_message(chat_id=message.chat.id,
                                       text="–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä–æ–≤?",
                                       reply_markup=add_or_no_markup)

            elif message.text == "–ù–µ—Ç üëé" and order != "":
                if order.count("___________________________________") > 1:
                    order = order[:order.rfind("___________________________________")]
                    await bot.send_message(chat_id=message.chat.id,
                                           text="–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä–æ–≤?",
                                           reply_markup=add_or_no_markup)
                else:
                    await bot.send_message(chat_id=message.chat.id,
                                                text="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤:"
                                                     "\n(–õ—é–±–æ–µ —Ö—É–¥–∏ - 1600 —Ä—É–±–ª–µ–π)", reply_markup=inline_markups[1])

                    order = f'<u>–ó–ê–ö–ê–ó</u>:\n\n –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{give_user(message.chat.id)[0]} - ' \
                            f'{give_user(message.chat.id)[1]}</b>'

            elif message.text == "–î–∞ ‚ûï" and order != "":
                await bot.send_message(chat_id=message.chat.id,
                                       text="–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
                                       reply_markup=inline_markups[-1])

            elif message.text == "–ù–µ—Ç ‚ûñ":
                goods = order[order.find("</b>"):]
                goods = goods[goods.find('<b>'):]
                await bot.send_message(message.chat.id, text=f'–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã: \n{goods}', reply_markup=arrange_or_no_markup,
                                       parse_mode="html")

            elif message.text == '–û—Ñ–æ—Ä–º–∏—Ç—å ‚òëÔ∏è':
                order_id = add_goods(message.chat.id, order)
                await bot.send_message(message.chat.id, text=f"ID –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>"
                                                             f"\n–ù–µ –ø–æ—Ç–µ—Ä—è–π—Ç–µ –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –µ–≥–æ.", parse_mode="html")
                await bot.send_message(message.chat.id, text='\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å: ',
                                       reply_markup=inline_markups[0], parse_mode="html")
                await bot.send_message(763283309, '<b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b>'
                                                  '\n\n' + order, parse_mode='html')

            elif message.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É üóë" and order != "" or message.text == "–°–±—Ä–æ—Å–∏—Ç—å ‚ùå" and order != "":
                order = f''
                await bot.send_message(message.chat.id, text="<b>–ö–û–†–ó–ò–ù–ê –û–ß–ò–©–ï–ù–ê</b>", parse_mode="html")
                await bot.send_message(message.chat.id, text='\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å: ',
                                       reply_markup=inline_markups[0], parse_mode="html")

            else:
                await bot.send_sticker(message.chat.id,
                                       'CAACAgIAAxkBAAEEEFJiI82UlJrBsUJH5q8NGhVLqWVvfwACFwEAAiI3jgRnUn-Ie8Ns0CME')
                await bot.send_message(message.chat.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–≥–æ(", reply_markup=action_markup,
                                       parse_mode="html")

    else:
        if message.text == '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë•':
            for user in give_all_users():
                await bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user[0]}</b>"
                                                        f"\n–°–≤—è–∑—å: <code>{user[1]}</code>"
                                                        f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: <b>{user[2]}</b>", parse_mode='html')

        elif message.text == "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ üìÉ":
            for order in give_all_orders():
                await bot.send_message(message.chat.id, f'–ó–ê–ö–ê–ó{order[3][order[3].find("/b>") + 3:]}'
                                                        f'\n\n\nid –∑–∞–∫–∞–∑–∞: <b>{order[0]}</b>'
                                                        f'\n\n\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{order[1]}</b>'
                                                        f'\n\n\n–°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: <code>{order[2]}</code>'
                                                        f'\n\n\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: <b>{order_states[int(order[4])]}</b>',
                                       reply_markup=order_states_markup, parse_mode='html')



# –†–∞–±–æ—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
@db.callback_query_handler()
async def callback_inline(call: types.CallbackQuery):
    global order
    if call.message:
        # –ù–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ —Ü–≤–µ—Ç—É
        if call.data == "Color_choice":  # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ —Ü–≤–µ—Ç—É"
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤:"
                                             "\n(–õ—é–±–æ–µ —Ö—É–¥–∏ - 1600 —Ä—É–±–ª–µ–π)", reply_markup=inline_markups[2])

        # –í—ã–≤–µ–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, –ø—Ä–∏–Ω—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ü–≤–µ—Ç–∞
        elif call.data[:len("Chosen_color")] == "Chosen_color":
            col = call.data[len("Chosen_color"):]
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=f'–¶–≤–µ—Ç: <b>{col}</b>.'
                                             f'\n\n–£–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª:', parse_mode="html", reply_markup=sex_markup)

            # –í—ã–≤–æ–¥ +–ø–æ–ª, –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
        elif call.data[:len("Choice_sex_")] == "Choice_sex_":
            if call.data[len("Choice_sex_"):] == "male":
                sex = '–ú—É–∂—Å–∫–æ–π'

            else:
                sex = '–ñ–µ–Ω—Å–∫–∏–π'
            mess = call.message.text.replace("\n\n–£–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª:",
                                             "").replace("–¶–≤–µ—Ç: ",
                                                         "–¶–≤–µ—Ç: <b>").replace(".",
                                                                              "</b>.") + \
                   f'\n\n–ü–æ–ª: <b>{sex}</b>.' \
                   f'\n\n–£–∫–∞–∂–∏—Ç–µ –í–∞—à —Ä–∞–∑–º–µ—Ä:'
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=mess, parse_mode="html", reply_markup=size_markup)

            # –í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        elif call.data[:len("Choice_size_")] == "Choice_size_":
            size = call.data[len('Choice_size_'):]
            mess = '–í–∞—à <u>–∑–∞–∫–∞–∑</u>: \n\n<b>–•—É–¥–∏</b>\n\n' + \
                   call.message.text.replace("\n\n–£–∫–∞–∂–∏—Ç–µ –í–∞—à —Ä–∞–∑–º–µ—Ä:",
                                             "").replace("–¶–≤–µ—Ç: ",
                                                         "–¶–≤–µ—Ç: <b>").replace(".",
                                                                              "</b>.").replace(
                       "\n\n–ü–æ–ª: ", "\n\n–ü–æ–ª: <b>") + f'\n\n–†–∞–∑–º–µ—Ä: <b>{size}</b>.\n\n<b>–í—Å—ë –≤–µ—Ä–Ω–æ?</b>'

            order += '\n___________________________________' \
                     '\n\n<b>–•—É–¥–∏</b>\n\n' + call.message.text.replace("\n\n–£–∫–∞–∂–∏—Ç–µ –í–∞—à —Ä–∞–∑–º–µ—Ä:",
                                                                       "").replace("–¶–≤–µ—Ç: ",
                                                                                   "–¶–≤–µ—Ç: <b>").replace(".",
                                                                                                        "</b>.").replace(
                "\n\n–ü–æ–ª: ", "\n\n–ü–æ–ª: <b>") + f'\n\n–†–∞–∑–º–µ—Ä: <b>{size}</b>'

            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            await bot.send_message(chat_id=call.message.chat.id,
                                   text=mess, parse_mode="html", reply_markup=accept_reject_markup)

        elif call.data == 'Return':  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            order = f''
            await bot.send_message(call.message.chat.id, text='\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å: ',
                                   reply_markup=inline_markups[0], parse_mode="html")

        elif call.data == "Reset":
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤:"
                                             "\n(–õ—é–±–æ–µ —Ö—É–¥–∏ - 1600 —Ä—É–±–ª–µ–π)", reply_markup=inline_markups[1])

        elif call.data[:len('restate_/')] == 'restate_':
            order_id = call.message.text
            print(order_id)

    await bot.answer_callback_query(callback_query_id=call.id)


if __name__ == '__main__':
    executor.start_polling(db, skip_updates=True)
